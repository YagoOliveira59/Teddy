services:
  # Serviço de Banco de Dados
  db:
    container_name: teddy-db
    image: postgres:17-alpine
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - minha-rede
    restart: unless-stopped

  # Serviço da API
  api:
    container_name: teddy-api
    build:
      context: .
      dockerfile: Dockerfile
      target: production-api
    ports:
      - "4000:4000"
    env_file:
      - ./apps/api/.env.docker
    depends_on:
      db:
        condition: service_healthy
    networks:
      - minha-rede
    restart: unless-stopped

  # Serviço do Cliente Web
  web-client:
    container_name: teddy-web
    build:
      context: .
      dockerfile: Dockerfile
      target: production-web
    ports:
      - "8080:80"
    env_file:
      - ./apps/web/.env
    networks:
      - minha-rede
    restart: unless-stopped

  # Serviço do Redis
  redis:
    container_name: teddy-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - minha-rede
    restart: unless-stopped

  # Serviço do Prometheus (Coleta de Métricas)
  prometheus:
    container_name: teddy-prometheus
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      # É necessário um arquivo de configuração para o Prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - minha-rede
    restart: unless-stopped
    depends_on:
      - api

  # Serviço do Grafana (Visualização de Métricas e Logs)
  grafana:
    container_name: teddy-grafana
    image: grafana/grafana-oss:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - minha-rede
    restart: unless-stopped
    depends_on:
      - prometheus

  # Serviço do Jaeger (Tracing Distribuído)
  jaeger:
    container_name: teddy-jaeger
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "16686:16686"
      - "14268:14268"
      - "4317:4317"
      - "4318:4318"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - minha-rede
    restart: unless-stopped
    depends_on:
      - api

networks:
  minha-rede:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  grafana-data: