version: '3.8' # Boa prática especificar a versão

services:
  # Serviço de Banco de Dados
  db:
    container_name: teddy-db
    image: postgres:17-alpine
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - ./.env # <--- Continua lendo o .env da raiz para as variáveis POSTGRES_*
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - minha-rede
    restart: unless-stopped

  # Serviço da API
  api:
    container_name: teddy-api
    build:
      context: . # <--- O contexto de build deve ser a pasta da sua API
      dockerfile: Dockerfile
      target: production-api
    ports:
      - "4000:4000"
    env_file:
      - ./apps/api/.env # <--- AGORA aponta para o .env da API
    depends_on:
      db:
        condition: service_healthy
    networks:
      - minha-rede
    restart: unless-stopped

  # Serviço do Cliente Web
  web-client:
    container_name: teddy-web
    build:
      context: . # <--- O contexto de build deve ser a pasta do seu cliente web
      dockerfile: Dockerfile
      target: production-web
    ports:
      - "8080:80"
    env_file:
      - ./apps/web/.env # <--- AGORA aponta para o .env do cliente web
    networks:
      - minha-rede
    restart: unless-stopped

networks:
  minha-rede:
    driver: bridge

volumes:
  postgres-data: